<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension="generated.cs" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ include file="ConnectionSettings.user.ttinclude" #>
//------------------------------------------------------------------------------
// <auto-generated>
//  Данный файл был сгенерирован автоматически при помощи шаблона GenerateEnum 
//
//  Изменения в этом файле могут повлечь за собой некорректное поведение 
//  и будут потеряны при следующей регенерации файла.
// </auto-generated>
//------------------------------------------------------------------------------
<#
	WriteLine("using System;");
	WriteLine("using System.ComponentModel;");
	WriteLine("using System.Runtime.Serialization;");
	WriteLine("");
	
	WriteLine(string.Format("namespace {0}", defaultNamespace));
	WriteLine("{");
	PushIndent("\t");

	List<EnumDefinition> definitions =
		new List<EnumDefinition>
		{	
			new EnumDefinition
			{
				Description = "Перечисление, определяющее виды приоритетов должностей сотрудников.",
				Columns = new List<string> { "Id", "Sysname", "Viewname" },
				Mapper = row => new EnumMember
					{
						Name = row["Sysname"].ToString(),
						Description = row["Viewname"].ToString(),
						Value = row["Id"].ToString()
					},
				Name = "Priorities",
				Schema = "dbo",
				Table = "Priorities"
			},
			new EnumDefinition
			{
				Description = "Перечисление, определяющее виды статусов заявок.",
				Columns = new List<string> { "Id", "Sysname", "Viewname" },
				Mapper = row => new EnumMember
					{
						Name = row["Sysname"].ToString(),
						Description = row["Viewname"].ToString(),
						Value = row["Id"].ToString()
					},
				Name = "Statuses",
				Schema = "dbo",
				Table = "Statuses"
			}
		};
		
	foreach (EnumDefinition definition in definitions)
	{
		if(!string.IsNullOrEmpty(definition.Namespace) && definition.Namespace != defaultNamespace)
		{
			WriteLine(string.Format("namespace {0}", definition.Namespace ));
			WriteLine("{");
			PushIndent("\t");
		}
		
		if (!string.IsNullOrEmpty(definition.Description))
		{
			WriteLine("/// <summary>");
			WriteLine(string.Format("/// {0}", definition.Description));
			WriteLine("/// </summary>");
			WriteLine(string.Format("/// <remarks>Данный enum был автоматически сгенерирован из таблицы {0}.</remarks>", definition.Table));
		}
		
		WriteLine("[DataContract]");
		if(definition.IsFlags)
			WriteLine("[Flags]");
		WriteLine(string.Format("public enum {0} : int", definition.Name ?? definition.Table));
		WriteLine("{");
		PushIndent("\t");
		
		foreach(var member in GetMembers(definition, mainConnectionString))
		{
			WriteLine("/// <summary>");
			WriteLine(string.Format("/// {0}{1}", member.Summary ?? member.Description, "."));
			WriteLine("/// </summary>");
			
			if(!string.IsNullOrEmpty(member.Description))
			{
				WriteLine(string.Format("[Description(\"{0}\")]",member.Description.Replace("\"", string.Empty)));
			}

			WriteLine("[EnumMember]");
			
			if (!string.IsNullOrEmpty(member.Value))
				WriteLine(string.Format("{0} = {1},", member.GetIdentifier(), member.Value));
			else
				WriteLine(string.Format("{0},", member.GetIdentifier()));

			WriteLine(string.Empty);
		}

		PopIndent();
		WriteLine("}");
		
		if(!string.IsNullOrEmpty(definition.Namespace) && definition.Namespace != defaultNamespace)
		{
			PopIndent();
			WriteLine("}");
		}
		
		WriteLine(string.Empty);
	}
	
	PopIndent();
	WriteLine("}");
#>

<#+
	public List<EnumMember> GetMembers(EnumDefinition definition, string connectionString)
	{
		using (SqlConnection connection = new SqlConnection(connectionString))
		{
			DataTable values = new DataTable();

			string columnList = string.Join(", ", definition.Columns.ToArray());

			SqlCommand command = new SqlCommand();
			
			command.Connection = connection;
			command.CommandType = CommandType.Text;
			command.CommandText = string.Format("SELECT {0} FROM [{1}].[{2}]", columnList, definition.Schema ?? "dbo", definition.Table);

			SqlDataAdapter adapter = new SqlDataAdapter(command);
			adapter.Fill(values);
			
			List<EnumMember> members = new List<EnumMember>();
			
			if (values.Rows.Count > 0)
			{
				foreach (DataRow row in values.Rows)
				{
					members.Add(definition.Mapper(row));
				}
			}
			
			return members;
		}
	}

	public static T Value<T>(DataRow row, string columnName)
	{
		try
		{
			return (T)row[columnName];
		}
		catch
		{
			return default(T);
		}
	}

	/// <summary>
	/// Defines the information needed to create an enum.
	/// </summary>
	public class EnumDefinition
	{
		/// <summary>
		/// Gets or sets the list of columns to retrieve.
		/// </summary>
		/// <value>A <see cref="List{T}"/> of column names.</value>
		public List<string> Columns { get; set; }

		/// <summary>
		/// Gets or sets the description of the enum.
		/// </summary>
		/// <value>A string containing the description.</value>
		/// <remarks>This will go into the summary section of the xml comment.</remarks>
		public string Description { get; set; }

		/// <summary>
		/// Gets or sets the function used to map the values.
		/// </summary>
		/// <value>A <see cref="Func{T,TResult}"/> object.</value>
		public Func<DataRow, EnumMember> Mapper { get; set; }

		/// <summary>
		/// Gets or sets the name of the enum.
		/// </summary>
		/// <value>A string containing the name.</value>
		/// <remarks>This will be the name of the enum type</remarks>
		public string Name { get; set; }

		/// <summary>
		/// Gets or sets the namespace of the enum.
		/// </summary>
		/// <value>A string containing the namespace.</value>
		public string Namespace { get; set; }

        /// <summary>
		/// Gets or sets the name of the database schema.
		/// </summary>
		/// <value>A string containing the name of the table.</value>
		public string Schema { get; set; }

		/// <summary>
		/// Gets or sets the name of the database table.
		/// </summary>
		/// <value>A string containing the name of the table.</value>
		public string Table { get; set; }
				
		public bool IsFlags { get; set; }
	}
	
	/// <summary>
	/// Defines the information needed to create an enum member.
	/// </summary>
	public class EnumMember
	{
		/// <summary>
		/// Gets or sets the description attribute of the enum member.
		/// </summary>
		/// <value>A string containing the description.</value>
		/// <remarks>This will go into the description attribute.</remarks>
		public string Description { get; set; }

		/// <summary>
		/// Gets or sets the summary of the enum member.
		/// </summary>
		/// <value>A string containing the description.</value>
		/// <remarks>This will go into the summary section of the xml comment.</remarks>
		public string Summary { get; set; }

		/// <summary>
		/// Gets or sets the name of the enum member.
		/// </summary>
		/// <value>A string containing the name.</value>
		/// <remarks>This will be the name of the enum type.</remarks>
		public string Name { get; set; }

		/// <summary>
		/// Gets or sets the value of the enum member.
		/// </summary>
		/// <value>An integer containing the value.</value>
		/// <remarks>This will be the value of the enum member.</remarks>
		public string Value { get; set; }
		
		public string GetIdentifier()
		{
			var regex = new System.Text.RegularExpressions.Regex(@"(?<слово>\w+)");
			Func<string, string> toPascal = name => 
				name.Length > 1 ? 
					string.Format("{0}{1}", name.Substring(0,1).ToUpper(), name.Substring(1)) : 
					name.ToUpper();
					
			var id = regex
				.Matches(Name)
				.Cast<System.Text.RegularExpressions.Match>()
				.ToList()
				.Select(m => toPascal(m.Groups["слово"].Value))
				.Aggregate("", (acc, item) => acc + item);

			if (id.All(ch => char.IsDigit(ch)))
				id = "_" + id;
				
			return id;
		}
	}
#>